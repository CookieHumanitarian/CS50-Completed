/* Struggled with this again as I did not understand the logic of the code at first. For this, we had to reverse an audio file. I initially thought that
reversing meant reading each bit backwards when in fact, i had to read each block backwards (but start reading the block from the top). */

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

#include "wav.h"

int check_format(WAVHEADER header);
int get_block_size(WAVHEADER header);

int main(int argc, char *argv[])
{
    // Ensure proper usage
    // TODO #1
    if (argc != 3)
    {
        printf("2 CLA\n");
        return 1;
    }

    // Open input file for reading
    // TODO #2

    FILE *wav = fopen(argv[1], "r");
    if (wav == NULL)
    {
        printf("Try again\n");
        return 1;
    }

    // Read header
    // TODO #3
    WAVHEADER header;
    fread(&header, sizeof(WAVHEADER), 1, wav);


    // Use check_format to ensure WAV format
    // TODO #4
    check_format(header);
    if (check_format(header) == 1)
    {
        return 1;
    }

    // Open output file for writing
    // TODO #5
    FILE *output = fopen(argv[2], "w");
    if (output == NULL)
    {
        return 1;
    }

    // Write header to file
    // TODO #6
    fwrite(&header, sizeof(WAVHEADER), 1, output);

    // Use get_block_size to calculate size of block
    // TODO #7
    int block_size = get_block_size(header);

    // Write reversed audio to file
    // TODO #8
    fseek(wav, 0, SEEK_END); //sets cursor to end of file
    BYTE buffer[block_size];
    while (ftell(wav) - block_size >= sizeof(WAVHEADER)) //need to minus to see whether we can read 1 block at a time
    {
        // write blocks in reverse
        fseek(wav, -1 * block_size, SEEK_CUR); //puts cursor to the start of the last block
        fread(&buffer, sizeof(buffer), 1, wav);
        fwrite(&buffer, sizeof(buffer), 1, output);
        //puts cursor to the end of the 2nd last block so that the first fseek command can put it in at the start again
        fseek(wav, -1 * block_size, SEEK_CUR);
    }

    fclose(wav);
    fclose(output);

    //TO CLOSE: wav
}

int check_format(WAVHEADER header)
{
    // TODO #4
    if (header.format[0] != 'W' && header.format[1] != 'A' && header.format[2] != 'V' && header.format[3] != 'E')
    {
        return 1;
    }
    return 0;
}

int get_block_size(WAVHEADER header)
{
    // TODO #7
    int h_bytes = header.bitsPerSample / 8;

    return header.numChannels * h_bytes;
}
