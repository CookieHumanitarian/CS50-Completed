#Had to validate a DNA sequence of a person and compare it to a database

import csv
import sys


def main():
    # TODO: Check for command-line usage
    if len(sys.argv) != 3:
        print("Usage: python dna.py data.csv sequence.txt")

    # TODO: Read database file into a variable
    with open(sys.argv[1]) as file:
        database = list(csv.DictReader(file))

    sequence = []
    # TODO: Read DNA sequence file into a variable
    with open(sys.argv[2]) as file:
        sequence = file.read()

    # TODO: Find longest match of each STR in DNA sequence
    AGATC = longest_match(sequence, "AGATC")
    TTTTTTCT = longest_match(sequence, "TTTTTTCT")
    AATG = longest_match(sequence, "AATG")
    TCTAG = longest_match(sequence, "TCTAG")
    GATA = longest_match(sequence, "GATA")
    TATC = longest_match(sequence, "TATC")
    GAAA = longest_match(sequence, "GAAA")
    TCTG = longest_match(sequence, "TCTG")

    # TODO: Check database for matching profiles
    names = 0
    if sys.argv[1].endswith("small.csv"):
        for row in database:
            if (
                str(AGATC) == row["AGATC"]
                and str(AATG) == row["AATG"]
                and str(TATC) == row["TATC"]
            ):
                print(row["name"])
                names += 1
        if names == 0:
            print("No Match")

    else:
        for row in database:
            if (
                str(AGATC) == row["AGATC"]
                and str(TTTTTTCT) == row["TTTTTTCT"]
                and str(AATG) == row["AATG"]
                and str(TCTAG) == row["TCTAG"]
                and str(GATA) == row["GATA"]
                and str(TATC) == row["TATC"]
                and str(GAAA) == row["GAAA"]
                and str(TCTG) == row["TCTG"]
            ):
                print(row["name"])
                names += 1
        if names == 0:
            print("No Match")

    return


def longest_match(sequence, subsequence):
    """Returns length of longest run of subsequence in sequence."""

    # Initialize variables
    longest_run = 0
    subsequence_length = len(subsequence)
    sequence_length = len(sequence)

    # Check each character in sequence for most consecutive runs of subsequence
    for i in range(sequence_length):
        # Initialize count of consecutive runs
        count = 0

        # Check for a subsequence match in a "substring" (a subset of characters) within sequence
        # If a match, move substring to next potential match in sequence
        # Continue moving substring and checking for matches until out of consecutive matches
        while True:
            # Adjust substring start and end
            start = i + count * subsequence_length
            end = start + subsequence_length

            # If there is a match in the substring
            if sequence[start:end] == subsequence:
                count += 1

            # If there is no match in the substring
            else:
                break

        # Update most consecutive matches found
        longest_run = max(longest_run, count)

    # After checking for runs at each character in seqeuence, return longest run found
    return longest_run


main()
