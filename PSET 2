/* Had to code a string to 8 bit binary. This was tough for me to abstract at first but after a few hours, I finally understood it and the code just fell
naturally. Am starting to make it a habit to abstract the problem / pseudocode before tackling the problem */

#include <cs50.h>
#include <stdio.h>
#include <string.h>

const int BITS_IN_BYTE = 8;

void print_bulb(int bit);

int main(void)
{
    string sentence = get_string("Sentence: \n"); //gets input from user
    int sentence_length = strlen(sentence); //gets character length
    int d = BITS_IN_BYTE * sentence_length;
    int backwards[d]; //should hold 8 characters times number of characters


    for (int i = 0; i < sentence_length; i++) //goes through each character in the string
    {
        int z = 0;
        int m = 0;
        do
        {
            int remainder = (int) sentence[i] % 2; //checks to see whether it divdes evenly by 2
            if (remainder == 0)
            {

                backwards[z] = 0;
                m++;
                z++;

            }
            else
            {
                backwards[z] = 1;
                m++;
                z++;
            }
            sentence[i] = sentence[i] / 2;
        }
        while (sentence[i] > 0);

        do
        {
            backwards[z] = 0;
            m++;
            z++;
        }
        while (m < 9); //adds extra 0's if the string is already formed until it reached 8 bits

        for (int f = 7; f >= 0; f--) //print backwards to get from front to back
        {
            print_bulb(backwards[f]);
        }
        printf("\n");
    }

}

void print_bulb(int bit) //prints the symbols of 0s and 1s
{
    if (bit == 0)
    {
        // Dark emoji
        printf("\U000026AB");
    }
    else if (bit == 1)
    {
        // Light emoji
        printf("\U0001F7E1");
    }
}

/* Had to create a program that will take in a user's input and output a cipher text using the Caesar Cipher. The user can input 1 command-line argument.
I had the overall structure down but i struggled with getting the program to check whether each character in the CLA is a digit. Eventually, found
out that I had to loop through each character and check for it.

#include <cs50.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

int main(int argc, string argv[])
{
    if (argc != 2) //only accepts 1 CLA
    {
        printf("Usage: ./caesar key\n");
        return 1;
    }

    int key = atoi(argv[1]); //gets the string from user and turns it into an int


    if (key < 0) //the CLA must be a positive integer
    {
        printf("Must be a positive integer\n");
        return 1;
    }


    for (int i = 0, m = strlen(argv[1]); i < m; i++)//THIS TOOK ME SO LONG TO CHECK FOR ALPHABETS
    {
        char c = argv[1][i];
        if (isalpha(c) != 0)
        {
            printf("Usage: ./caesar key\n");
            return 1;
        }
    }



    //alphabet and just 1 argument

    string plain = get_string("plaintext: \n"); //gets plaintext from user
    int plain_length = strlen(plain);

    printf("ciphertext: ");
    for (int i = 0; i < plain_length; i++)
    {

        int c = plain[i];
        if (islower(plain[i]) != 0) //If it's lower
        {
            c += key;
            while (c > 122)
            {
                c -= 26;
            }
        }

        if (isupper(plain[i]) != 0)
        {
            c += key;
            while (c > 90)
            {
                c -= 26;
            }
        }

        printf("%c", c);
    }
    printf("\n");
    return 0;
}

/* Good practice in abstracting the problem before coding. I had to take in a command-line argument which was a 26 alphabet key and to cipher a 
text based on that key. This built on the principles of the Caesar problem i solved above */

//cipher text is the text that user inputs (so [1][1 - 26])
//replace each word by subtracting it from the lowest word and accessing that number from the array
//do this for capitalised and non-capitalised letters

#include <cs50.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>

int main(int argc, string argv[])
{
    if (argc != 2) //only takes in 1 argument
    {
        printf("Error:\n");
        return 1;
    }

    for (int i = 0; i < 25; i++)//looks through each character and checks it below
    {
        char c = argv[1][i];

        for (int j = i + 1; j < 26; j++) //check whether there's any duplicates
        {
            if (c == argv[1][j])
            {
                printf("Error:\n");
                return 1;
            }

            if (isalpha(c) == 0) //checks whether it's an alphabet
            {
                printf("Error:\n");
                return 1;
            }
        }
    }

    string cla_length = argv[1];
    if (strlen(cla_length) != 26) //checks to see whether the user enters 26 characters for the key
    {
        printf("Error:\n");
        return 1;
    }

    string sentence = get_string("plaintext: ");  //gets plaintext from user
    int s_length = strlen(sentence);
    printf("ciphertext: ");

    for (int i = 0; i < s_length; i++) //loops through each character in the plaintext
    {
        char c = sentence[i];
        if (islower(c) != 0) //if the character is lowercase, it loops here
        {
            int n = c - 97; //subtract from the the value of lowercase a to find its position in the alphabet key
            char k = tolower(argv[1][n]);
            printf("%c", k);
        }

        if (isupper(c) != 0) //if the character is uppercase, it loops here
        {
            int n = c - 65;
            char k = toupper(argv[1][n]); //same principle as the above
            printf("%c", k);
        }

        if (c == ' ' || ispunct(c) != 0) //checks for punctuation and leaves it untouch
        {
            printf("%c", c);
        }

        if (isdigit(c) != 0) //prints out digits untouched
        {
            printf("%c", c);
        }
    }

    printf("\n");
}

/* Was on of the easier assignments for me due to the hints the task provided in the code itself. For this task, I just have to implement wordle.
I was stuck initially because i did not know the difference between a strlen() and atoi(). I was using atoi() to get the length of the string initially. I 
now know that atoi() is used to calculate the actual integer value of the string whereas strlen() is used to calculate the length (in characters) of the 
string */

#include <cs50.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <time.h>

// each of our text files contains 1000 words
#define LISTSIZE 1000

// values for colors and score (EXACT == right letter, right place; CLOSE == right letter, wrong place; WRONG == wrong letter)
#define EXACT 2
#define CLOSE 1
#define WRONG 0

// ANSI color codes for boxed in letters
#define GREEN   "\e[38;2;255;255;255;1m\e[48;2;106;170;100;1m"
#define YELLOW  "\e[38;2;255;255;255;1m\e[48;2;201;180;88;1m"
#define RED     "\e[38;2;255;255;255;1m\e[48;2;220;20;60;1m"
#define RESET   "\e[0;39m"

// user-defined function prototypes
string get_guess(int wordsize);
int check_word(string guess, int wordsize, int status[], string choice);
void print_word(string guess, int wordsize, int status[]);

int main(int argc, string argv[])
{
    //TODO #1
    if (argc != 2) //only accepts 1 CLA
    {
        printf("Usage: ./wordle wordsize\n");
        return 1;
    }

    int wordsize = 0;
    // ensure argv[1] is either 5, 6, 7, or 8 and store that value in wordsize instead
    // TODO #2
    wordsize = atoi(argv[1]);
    if (wordsize < 5 || wordsize > 8) //CLA must be an integer from 4 to 8
    {
        printf("Error: wordsize must be either 5, 6, 7, or 8\n");
        return 1;
    }

    // open correct file, each file has exactly LISTSIZE words
    char wl_filename[6];
    sprintf(wl_filename, "%i.txt", wordsize);
    FILE *wordlist = fopen(wl_filename, "r");
    if (wordlist == NULL)
    {
        printf("Error opening file %s.\n", wl_filename);
        return 1;
    }

    // load word file into an array of size LISTSIZE
    char options[LISTSIZE][wordsize + 1];

    for (int i = 0; i < LISTSIZE; i++)
    {
        fscanf(wordlist, "%s", options[i]);
    }

    // pseudorandomly select a word for this game
    srand(time(NULL));
    string choice = options[rand() % LISTSIZE];

    // allow one more guess than the length of the word
    int guesses = wordsize + 1;
    bool won = false;

    // print greeting, using ANSI color codes to demonstrate
    printf(GREEN"This is WORDLE50"RESET"\n");
    printf("You have %i tries to guess the %i-letter word I'm thinking of\n", guesses, wordsize);

    // main game loop, one iteration for each guess
    for (int i = 0; i < guesses; i++)
    {
        // obtain user's guess
        string guess = get_guess(wordsize);

        // array to hold guess status, initially set to zero
        int status[wordsize];

        // set all elements of status array initially to 0, aka WRONG
        for (int j = 0; j < wordsize; j++)
        {
            status[j] = WRONG;
        }


        // Calculate score for the guess
        int score = check_word(guess, wordsize, status, choice);

        printf("Guess %i: ", i + 1);

        // Print the guess
        print_word(guess, wordsize, status);

        // if they guessed it exactly right, set terminate loop
        if (score == EXACT * wordsize)
        {
            won = true;
            break;
        }
    }

    // Print the game's result
    // TODO #7

    if (won == true)
    {
        printf("You Won!\n");
    }
    else
    {
        printf("The word was: %s\n", choice);
    }

    // that's all folks!
    return 0;
}

string get_guess(int wordsize) //TODO #3
{
    string guess = "";
    int length = 0;
    do
    {
        guess = get_string("Input a %i-letter word: ", wordsize);
        length = strlen(guess);
    }
    while (length != wordsize);

    return guess;
}

int check_word(string guess, int wordsize, int status[], string choice)
{
    int score = 0;
    //guess = user's guess
    //wordsize = size of the user's guess
    //status = status of each letter (can be EXACT, CLOSE, or WRONG)
    ///choice = the word that is selected for WORDLE

    // compare guess to choice and score points as appropriate, storing points in status
    // TODO #5

    // HINTS
    // iterate over each letter of the guess
    // iterate over each letter of the choice
    // compare the current guess letter to the current choice letter
    // if they're the same position in the word, score EXACT points (green) and break so you don't compare that letter further
    // if it's in the word, but not the right spot, score CLOSE point (yellow)
    // keep track of the total score by adding each individual letter's score from above

    for (int i = 0; i < wordsize; i++) // goes through each letter of the guess
    {
        char c = guess[i];

        if (c == choice[i])
        {
            score += 2;
            status[i] = EXACT;
        }
        else
        {
            for (int k = 0; k < wordsize; k++) // goes through each letter of the choice
            {
                if (c == choice[k])
                {
                    score += 1;
                    status[i] = CLOSE;
                }

            }
        }
    }
    return score;
}

void print_word(string guess, int wordsize, int status[])
{
    // print word character-for-character with correct color coding, then reset terminal font to normal
    // TODO #6
    for (int i = 0; i < wordsize; i++)
    {
        char c = guess[i];
        if (status[i] == EXACT)
        {
            printf(GREEN"%c"RESET, c);
        }
        else if (status[i] == CLOSE)
        {
            printf(YELLOW"%c"RESET, c);
        }
        else
        {
            printf(RED"%c"RESET, c);
        }
    }

    printf("\n");
    return;
}
